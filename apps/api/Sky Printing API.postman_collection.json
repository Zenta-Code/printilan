{
	"info": {
		"_postman_id": "56bb9546-6e7c-483a-9f9e-ba92291c1df1",
		"name": "Sky Printing API",
		"description": "Sky Printing API test endpoint",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21874629",
		"_collection_link": "https://planetary-crater-665941.postman.co/workspace/a~99306df1-bc84-4717-8f60-78e5e82c189f/collection/21874629-56bb9546-6e7c-483a-9f9e-ba92291c1df1?action=share&source=collection_link&creator=21874629"
	},
	"item": [
		{
			"name": "Ping",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://manpro.zenta.dev/api/ping",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bunde By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the success field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the data object is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"pm.test(\"Verify that _id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should not be empty\");",
							"});",
							"",
							"pm.test(\"Prices array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data.prices).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle?id=654cbba0e95fa7bbee53189b",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle"
					],
					"query": [
						{
							"key": "id",
							"value": "654cbba0e95fa7bbee53189b"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bundle by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle?storeId=65465440e95fa7bbeeb0815d",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle"
					],
					"query": [
						{
							"key": "storeId",
							"value": "65465440e95fa7bbeeb0815d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bundle by Store Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle?storeId=65465440e95fa7bbeeb0815d",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle"
					],
					"query": [
						{
							"key": "storeId",
							"value": "65465440e95fa7bbeeb0815d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bundle by Description",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle?storeId=65465440e95fa7bbeeb0815d",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle"
					],
					"query": [
						{
							"key": "storeId",
							"value": "65465440e95fa7bbeeb0815d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Bundle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"New Bundle\",\r\n    \"desc\":\"Bundle desc\",\r\n    \"prices\":[\r\n        {\r\n            \"option\":\"Opt 1\",\r\n            \"price\":2000\r\n        }\r\n    ],\r\n    \"storeId\":\"65465440e95fa7bbeeb0815d\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Bundle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"New Bundle\",\r\n    \"desc\":\"Bundle desc\",\r\n    \"prices\":[\r\n        {\r\n            \"option\":\"Opt 1\",\r\n            \"price\":2000\r\n        }\r\n    ],\r\n    \"storeId\":\"65465440e95fa7bbeeb0815d\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle/65656cd602b173c3bfc3d97e",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle",
						"65656cd602b173c3bfc3d97e"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Bundle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"New Bundle\",\r\n    \"desc\":\"Bundle desc\",\r\n    \"price\":[\r\n        {\r\n            \"name\":\"Opt 1\",\r\n            \"value\":2000\r\n        }\r\n    ],\r\n    \"storeId\":\"65465440e95fa7bbeeb0815d\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/bundle/65656cd602b173c3bfc3d97e",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"bundle",
						"65656cd602b173c3bfc3d97e"
					]
				}
			},
			"response": []
		},
		{
			"name": "Document By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"New Bundle\",\r\n    \"desc\":\"Bundle desc\",\r\n    \"price\":[\r\n        {\r\n            \"name\":\"Opt 1\",\r\n            \"value\":2000\r\n        }\r\n    ],\r\n    \"storeId\":\"65465440e95fa7bbeeb0815d\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/document?id=655599e3778e9276a51f1328",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"document"
					],
					"query": [
						{
							"key": "id",
							"value": "655599e3778e9276a51f1328"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Document By User Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"New Bundle\",\r\n    \"desc\":\"Bundle desc\",\r\n    \"price\":[\r\n        {\r\n            \"name\":\"Opt 1\",\r\n            \"value\":2000\r\n        }\r\n    ],\r\n    \"storeId\":\"65465440e95fa7bbeeb0815d\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/document?userId=654650bce95fa7bbeead691a",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"document"
					],
					"query": [
						{
							"key": "userId",
							"value": "654650bce95fa7bbeead691a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Document By File Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"New Bundle\",\r\n    \"desc\":\"Bundle desc\",\r\n    \"price\":[\r\n        {\r\n            \"name\":\"Opt 1\",\r\n            \"value\":2000\r\n        }\r\n    ],\r\n    \"storeId\":\"65465440e95fa7bbeeb0815d\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/document/?fileName=epson_rc_pl_7.0_api_manual-rc700a_rc90_t(r10).pdf",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"document",
						""
					],
					"query": [
						{
							"key": "fileName",
							"value": "epson_rc_pl_7.0_api_manual-rc700a_rc90_t(r10).pdf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "654650bce95fa7bbeead691a",
							"type": "text"
						},
						{
							"key": "totalPage",
							"value": "10",
							"type": "text"
						},
						{
							"key": "size",
							"value": "A4",
							"type": "text"
						},
						{
							"key": "color",
							"value": "true",
							"type": "text"
						},
						{
							"key": "totalPrice",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/Matt/Downloads/epson_rc_pl_7.0_api_manual-rc700a_rc90_t(r10).pdf"
						},
						{
							"key": "copies",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/document",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"document"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'success' field is true\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.success).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'message' field is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate that the name field in the data array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "654650bce95fa7bbeead691a",
							"type": "text"
						},
						{
							"key": "totalPage",
							"value": "10",
							"type": "text"
						},
						{
							"key": "size",
							"value": "A4",
							"type": "text"
						},
						{
							"key": "color",
							"value": "true",
							"type": "text"
						},
						{
							"key": "totalPrice",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/Matt/Downloads/epson_rc_pl_7.0_api_manual-rc700a_rc90_t(r10).pdf"
						},
						{
							"key": "copies",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/document/656571ebbfcfb6cf631d8528",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"document",
						"656571ebbfcfb6cf631d8528"
					]
				}
			},
			"response": []
		},
		{
			"name": "Order by Store Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"",
							"pm.test(\"Message is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Data array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/order?storeId=65465440e95fa7bbeeb0815d",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"order"
					],
					"query": [
						{
							"key": "storeId",
							"value": "65465440e95fa7bbeeb0815d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"",
							"pm.test(\"Message is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Data array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\":\"654650bce95fa7bbeead68ec\",\r\n    \"storeId\":\"654650bce95fa7bbeead691a\",\r\n    \"documentId\":\"655735ddb035b99f17437611\",\r\n    \"totalPrice\":10000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/order",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"order"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Callback",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is successful\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"",
							"pm.test(\"Message is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Data array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\":\"654650bce95fa7bbeead68ec\",\r\n    \"storeId\":\"654650bce95fa7bbeead691a\",\r\n    \"documentId\":\"655735ddb035b99f17437611\",\r\n    \"totalPrice\":8000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/order/callback1",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"order",
						"callback1"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Store by Id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/store?id=65465440e95fa7bbeeb0815d",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"store"
					],
					"query": [
						{
							"key": "id",
							"value": "65465440e95fa7bbeeb0815d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Store by Name",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/store?name=Matt Piere",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"store"
					],
					"query": [
						{
							"key": "name",
							"value": "Matt Piere"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Store by City",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/store?city=New York",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"store"
					],
					"query": [
						{
							"key": "city",
							"value": "New York"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Store",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Matt Piere\",\r\n            \"address\": {\r\n            \"street\": \"Jl. Ketintang no 23\",\r\n            \"city\": \"Surabayaa\",\r\n            \"state\": \"Jawa Timur\",\r\n            \"country\": \"Indonesia\",\r\n            \"zipCode\": \"60231\"\r\n        },\r\n         \r\n        \"phone\": \"085732030855\",\r\n        \"ownerId\":\"6561f6e59aaaa41d5fe16378\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/store/sign-up",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"store",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dekete Store",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/store/656987a4537e45b0389af409",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"store",
						"656987a4537e45b0389af409"
					]
				}
			},
			"response": []
		},
		{
			"name": "User by Id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/user?id=6561f6e59aaaa41d5fe16378",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"user"
					],
					"query": [
						{
							"key": "id",
							"value": "6561f6e59aaaa41d5fe16378"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User by Email",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/user?email=violia@gmaiil.com",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"user"
					],
					"query": [
						{
							"key": "email",
							"value": "violia@gmaiil.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with success property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('success');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with user property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('user');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object with token property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('token');\r",
							"});var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Field</th>\r",
							"        <th>Value</th>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Success</td>\r",
							"        <td>{{response.success}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Message</td>\r",
							"        <td>{{response.message}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>User ID</td>\r",
							"        <td>{{response.user._id}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Name</td>\r",
							"        <td>{{response.user.name}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Email</td>\r",
							"        <td>{{response.user.email}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Phone</td>\r",
							"        <td>{{response.user.phone}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Role</td>\r",
							"        <td>{{response.user.role}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Created At</td>\r",
							"        <td>{{response.user.createdAt}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Updated At</td>\r",
							"        <td>{{response.user.updatedAt}}</td>\r",
							"    </tr>\r",
							"    \r",
							"    <tr>\r",
							"        <td>Token</td>\r",
							"        <td>{{response.token}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return { response: pm.response.json() }\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"violia@gmaiil.com\",\r\n    \"password\":\"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/user/sign-in",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"user",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Sign Up",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Language",
						"value": "id-ID",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"viol\",\r\n  \"email\": \"violia@gmaiil.com\", \r\n  \"role\": \"customer\",\r\n  \"password\": \"password\",\r\n  \"confirmPassword\": \"password\",\r\n  \"address\": {\r\n    \"street\": \"Jl. Ketintang no 23\",\r\n    \"city\": \"Surabayaa\",\r\n    \"state\": \"Jawa Timur\",\r\n    \"country\": \"Indonesia\",\r\n    \"zipCode\": \"60231\"\r\n  },\r\n  \"phone\": \"085732030855\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://manpro.zenta.dev/api/user/sign-up",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"user",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NjFiZGIwNmY1YzNkMmMzMWY0NDA1MiIsImlhdCI6MTcwMDkxODQwOCwiZXhwIjoxNzAxMDA0ODA4fQ.kEAkz12hAp0vLqqXX2Mbcbphonh2uEmhjF_e4C8QxcI",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://manpro.zenta.dev/api/user/delete/6561f6a175b4d02d486ff74c",
					"protocol": "https",
					"host": [
						"manpro",
						"zenta",
						"dev"
					],
					"path": [
						"api",
						"user",
						"delete",
						"6561f6a175b4d02d486ff74c"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NjFmNmU1OWFhYWE0MWQ1ZmUxNjM3OCIsImlhdCI6MTcwMTQxMjQ0OSwiZXhwIjoxNzAxNDk4ODQ5fQ.uBiUsRk3eCvvnSiSWQkwbZZAkYz9m2DCcMZqnB5cPus",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.addHeader({",
					"    key:\"Accept-Language\",",
					"    value:\"id-ID\"",
					"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Accept-Language",
			"value": "id-ID",
			"type": "string"
		}
	]
}